import ballerina/log;
import ballerina/sql;
import ballerina/time;
import ballerinax/java.jdbc;

configurable string username = "user";
configurable string password = "pass";

isolated class GameDB {
    private final jdbc:Client jdbcClient;

    function init(string file) returns error? {
        log:printInfo("GameDB::init opening database at ./" + file);
        self.jdbcClient = check new ("jdbc:h2:file:./" + file, username, password);

        // Turn on tracing
        _ = check self.jdbcClient->execute(`SET TRACE_LEVEL_SYSTEM_OUT 1`);

        // Runs the prerequisite setup for the example.
        _ = check self.jdbcClient->execute(`
            CREATE TABLE IF NOT EXISTS Games(
            id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY, 
            playerOne VARCHAR(80), playerTwo VARCHAR(80),
            board VARCHAR(80) ARRAY,
            playerToMove VARCHAR(80),
            createdAt TIMESTAMP,
            PRIMARY KEY (id))`);

        log:printInfo("Initialization completed");
    }

    isolated function insert(string playerOne, string playerTwo) returns int|error {
        log:printInfo("GameDB::insert");

        string[] board = [ "", "", "", "", "", "", "", "", "" ];
        time:Utc createdAt = time:utcNow();

        sql:ParameterizedQuery query = 
            `INSERT INTO Games (playerOne, playerTwo, board, playerToMove, createdAt) 
             VALUES (${playerOne},${playerTwo}, ${board}, ${playerOne}, ${createdAt})`;
        sql:ExecutionResult result = check self.jdbcClient->execute(query);
        log:printInfo("SQL RESULT: " + result.toString());
        (int|string)? insertId = result.lastInsertId;
        return insertId is int ? insertId : -1;
    }

    isolated function game(int id) returns Game|error {
        log:printInfo("GameDB::game(" + id.toString() + ")");
        return check self.jdbcClient->queryRow(`SELECT * FROM Games where id = ${id}`);
    }

    isolated function retrieve(string clause = "") returns Game[]|error {
        sql:ParameterizedQuery query = 
          (clause.length() > 0) ? `SELECT * FROM Games WHERE ${clause}` : `SELECT * FROM Games`;

        Game[] games = [];
        stream<Game,error?> results = self.jdbcClient->query(query);
        check from Game game in results
            do {
                log:printInfo("Found " + game.toString());
                games.push(game);
            };
        return games;
    }

    isolated function update(Game game) returns error? {
        log:printInfo("GameDB::update(" + game.toString() + ")");
        sql:ParameterizedQuery query =
            `UPDATE Games SET playerToMove=${game.playerToMove}, 
             board = ${game.board} WHERE id = ${game.id}`;
        _ = check self.jdbcClient->execute(query);
     }

    function delete(int id) returns error? {
        log:printInfo("GameDB::delete(" + id.toString() + ")");
        _ = check self.jdbcClient->execute(`DELETE FROM Games WHERE id = ${id}`);
    }

    function drop() returns error? {
        _ = check self.jdbcClient->execute(`DROP TABLE Games`);
    }

    function close() returns error? {
        check self.jdbcClient.close();
    }
}