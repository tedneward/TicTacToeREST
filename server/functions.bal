import ballerina/lang.value;
import ballerina/log;
import ballerina/sql;
import ballerina/time;
import ballerinax/java.jdbc;

class GameDB {
    jdbc:Client jdbcClient;

    function init(string file) returns error? {
        log:printInfo("Initializing functions...");

        self.jdbcClient = check new ("jdbc:h2:file:./" + file, "user", "pass");

        // Turn on tracing
        _ = check self.jdbcClient->execute(`SET TRACE_LEVEL_SYSTEM_OUT 1`);

        // Runs the prerequisite setup for the example.
        _ = check self.jdbcClient->execute(`CREATE TABLE IF NOT EXISTS Games(
            id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY, 
            playerOne VARCHAR(80), playerTwo VARCHAR(80),
            board VARCHAR(80) ARRAY,
            playerToMove VARCHAR(80),
            createdAt TIMESTAMP,
            PRIMARY KEY (id))`);

        log:printInfo("Completed");
    }

    function raw() returns jdbc:Client {
        return self.jdbcClient;
    }

    function insert(string playerOne, string playerTwo) returns int|error {
        log:printInfo("GameDB::insert");
        string[] board = [ "", "", "", "", "", "", "", "", "" ];
        time:Utc createdAt = time:utcNow();
        sql:ParameterizedQuery query = 
            `INSERT INTO Games (playerOne, playerTwo, board, playerToMove, createdAt) 
             VALUES (${playerOne},${playerTwo}, ${board}, ${playerOne}, ${createdAt})`;
        sql:ExecutionResult result = check self.jdbcClient->execute(query);
        log:printInfo(string `SQL RESULT ${result.toBalString()}`);
        return <int>result.lastInsertId;
    }

    function game(int id) returns Game|error {
        log:printInfo(string `GameDB::game(${id})`);
        Game result = check self.jdbcClient->queryRow(`SELECT * FROM Games where id = ${id}`);
        log:printError(string `result: ${result.toBalString()}`);
        return result;
    }

    function retrieve(string clause = "") returns Game[]|error {
        sql:ParameterizedQuery query = `SELECT * FROM Games`;
        if clause.length() > 0 {
            query = `SELECT * FROM Games WHERE ${clause}`;
        }

        Game[] games = [];
        stream<Game,error?> results = self.jdbcClient->query(query);
        check from Game game in results
            do {
                log:printInfo(string `Found ${game.toString()}`);
                games.push(game);
            };
        return games;
    }

    function update(Game game) returns error? {
        log:printInfo(string `GameDB::update(${game.toString()}`);
        sql:ParameterizedQuery query =
            `UPDATE Games SET playerToMove=${game.playerToMove},
             board = ${game.board} WHERE id = ${game.id}`;
        _ = check self.jdbcClient->execute(query);
     }

    function delete(int id) returns error? {
        log:printInfo(string `GameDB::delete(${id})`);
        _ = check self.jdbcClient->execute(`DELETE FROM Games WHERE id = ${id}`);
    }

    function drop() returns error? {
        _ = check self.jdbcClient->execute(`DROP TABLE Games`);
    }

    function close() returns error? {
        check self.jdbcClient.close();
    }
}

final GameDB gamedb;
function init() returns error? {
    gamedb = check new GameDB("games");
}

public function getGames() returns Game[]|error {
    log:printInfo("getGames()");
    return check gamedb.retrieve();
}
public function getGame(int id) returns Game|error {
    log:printInfo(string `getGame(id:${id}): `);
    Game game = check gamedb.game(id);
    log:printInfo(string ` returns ${game.toString()}`);
    return game;
}
public function createGame(string p1, string p2) returns Game|error {
    log:printInfo(string `createGame(p1: ${p1}, p2: ${p2})`);

    // p1 is X and board always first to move; TODO randomize this

    int id = check gamedb.insert(p1, p2);
    Game|error result = check gamedb.game(id);
    if result is error {
        log:printError(result.toString());
    }
    else {
        log:printInfo(string `returns ${result.toString()}`);
    }
    return result;
}
function checkWinner(Game game, string player) returns boolean {
    log:printInfo(string `Checking for winner in game ${game.id} for player ${player}`);

    var winPatterns = [
        // Down
        [0, 3, 6],
        [1, 4, 7],
        [2, 5, 8],
        // Across
        [0, 1, 2],
        [3, 4, 5],
        [6, 7, 8],
        // Diagonal
        [0, 4, 8],
        [2, 4, 6]
    ];

    foreach int[] pattern in winPatterns {
        log:printInfo(string `Checking pattern ${pattern.toBalString()}: `);

        boolean win = true;
        pattern.forEach(function (int pos) {
            if (game.board[pos] != player) {
                win = false;
            }
        });
        log:printInfo(win.toString());

        if (win) {
            return true;
        }
    }

    return false;
}
function checkCats(Game game) returns boolean {
    log:printInfo(string `Checking for cats game in game ${game.id}`);

    // Brute-force method: if any space is open, it's not cats yet
    var openSqs = game.board.filter(function (anydata sq) returns boolean { return (value:toString(sq) == ""); });
    log:printInfo(string `${openSqs.length()} squares are open`);
    return openSqs.length() == 0;

    // TODO: optimize this to detect when there's an open square on an unwinnable game
    // so the players don't have to go through the motions
}
public function makeMove(Game game, Move move) returns Game|error {
    log:printInfo(string `makeMove(game:${game.toBalString()}, move:${move.toBalString()})`);

    ///////////////////////
    // Process the move
    int boardPos = move.boardPosition;

    // Game must not be over
    if (game.winner != () ) {
        return error(string `Game is completed; ${(game.winner ?: "")}`);
    }

    // It must be this player's turn
    if (game.playerToMove != () && game.playerToMove != move.player) {
        return error("Illegal move: Not your turn!");
    }

    // That position cannot already be occupied
    if (game.board[boardPos] != "") {
        return error("Illegal move: Occupied space!");
    }

    // Put the player in that given square
    game.board[boardPos] = move.player;
    // Update the player moving
    game.playerToMove = (game.playerOne == move.player ? game.playerTwo : game.playerOne);
    // Update the most-recent message
    game.message = "Last move: " + move.player + " takes square " + value:toString(move.boardPosition);

    ///////////////////////
    // Check for winner
    if (checkWinner(game, game.playerOne)) {
        game.winner = game.playerOne;
        game.message += "; " + game.playerOne + " WINS!";
    }
    else if (checkWinner(game, game.playerTwo)) {
        game.winner = game.playerTwo;
        game.message += "; " + game.playerTwo + " WINS!";
    }
    else if (checkCats(game)) {
        game.winner = "(NOBODY)";
        game.message += "; cats game (draw)!";
    }

    log:printInfo(string `Updating game: ${game.toString()}`);
    _ = check gamedb.update(game);
    return game;
}
